#!/usr/bin/perl 
#
# Fortigate の syslog を csv へ変換
#
# $0 -i Fortigate.log -o output.csv -e "exclude,col1,col2,col3"
#
# -e は除外する項目 (出力ファイルサイズの削減のため)
#
# いずれ -i で、出力項目の選択もできるように...
# そうすると、最初の pass 1/2 が不要になります
#
# pass 1 で入力ファイルを全て舐めて、項目の一覧を作成
#	(csv ファイルのカラム数を確定)
# pass 2 で、再度入力ファイルを頭から csv 形式に変換
#
# メモリ上でやれば読み込みは一度で済みますが、大きなログだと
# メモリの限界が来るため 2pass 方式にしています
#
BEGIN {
	# $ENV{PERL_TEXT_CSV}='Text::CSV_PP';
	$ENV{PERL_TEXT_CSV}='Text::CSV_XS';
}

use strict;
use warnings;
use Getopt::Long;
use Text::CSV;
use Data::Dumper;
$Data::Dumper::Deparse = 1;

use utf8;
binmode(STDIN, ":utf8");
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");

my ($in_Forti, $out_csv) = ('','');
my %field_name;
my @field_name;
my $read_lines;
my $exclude = [];

GetOptions( \my %opt, qw/in=s out=s exclude=s/)
	or die "引数が異常です";

$in_Forti = $opt{in}; 
$out_csv = $opt{out}
	if exists $opt{out};
$exclude = [ split /,/, $opt{exclude} ];

($out_csv = $in_Forti)  =~ s/\.[^.]+$/.csv/
	if ($out_csv eq '');
print "$out_csv を上書きします。\n" if (-e $out_csv) ;

print " ==> input Forti_log: $in_Forti\n";
print " ==> output csv:      $out_csv\n";

open my $log_fh, "<:encoding(UTF-8)", $in_Forti
	or die "ファイルが開けません: $in_Forti :$!";
open my $out_fh, ">:encoding(cp932)", $out_csv
	or die "出力先のファイルが開けません: $out_csv :$!";

# 項目名を取得
print " ==> parse field name\n";

$read_lines = 0;
printf "         line persing (1/2 pass)\r";
$| = 1;	# 経過出力用 - バッファリンク無効
while (<$log_fh>) {
	s/="[^"]+" ?/ /g;
	s/=[^ ]+ ?/ /g;
	my @line = split;

	foreach my $line (@line) {
		unless (exists $field_name{$line}) {
			$field_name{$line} = keys %field_name;
		}
	}
	# 読み込み中行数表示
	++$read_lines;
	printf "%8d\r", $read_lines
		if ($read_lines % 1000 == 0);

	# 1万行までしか解析しない
	#last
	#	if ($. > 10001);
}
$| = 0;
printf "%8d\n", $read_lines;

# 不要フィールドの削除
map {delete $field_name{$_}} @{$exclude};

# フィールド名を出現順に並び変えて配列へ変換
foreach my $key (sort {$field_name{$a} <=> $field_name{$b}} keys %field_name){
	push (@field_name, $key);
}

# 再度、先頭からファイルを読む
seek ($log_fh, 0, 0)
	or die ": $in_Forti ファイルの先頭へ戻れませんでした :$!";

my $csv = Text::CSV -> new ({binary => 1,});

print "\n ==> converting\n";
# 項目名の出力
$csv->say ($out_fh, \@field_name);

printf "         /%8d line converting (2/2 pass)\r", $read_lines;
$read_lines = 0;
$| = 1;
while (<$log_fh>) {
	my @tmp = ();
	chomp;

	# (項目名, 値, 項目名, 値... )という配列に分割する 
	my @line = split /=/;
	foreach (@line) {
		# ダブルクォートが二重になるのを防ぐため、内側だけ取ってくる
		m/^(?:([^" ]*)|"(.*)")(?: ([^ ]*))?$/;

		if ( defined $2 ) {
			push (@tmp, $2, $3);
		} elsif ( defined $3 ) {
			push (@tmp, $1, $3);
		} else {
			push (@tmp, $_);
		}
	}

	# $column->{項目名} = 値	に変換 (リファレンス)
	my $column_hash = { @tmp };

	# field_name で並べ替え (リファレンス)
	my $column_array = [ map {$column_hash->{$_};} @field_name ];

	$csv->say ($out_fh, $column_array); 
	# 読み込み行数表示
	++$read_lines;
	printf "%8d\r", $read_lines
		if ($read_lines % 1000 == 0);
}
$| = 0;
printf "%8d\n", $read_lines;
printf "%8d lines done!\n", $read_lines

# see
#
# FortiGate to CSV Converter
# https://github.com/danwalkeruk/fortigate2csv
#
# fg_log_parser
# https://github.com/oelu/fg_log_parser
#
# Forti Log CSV Converter
# https://github.com/N4SOC/fortilogcsv
#
